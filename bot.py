import os
import logging
import json
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import LabeledPrice, PreCheckoutQuery
from aiogram.types.message import ContentType
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = '5997177755:AAFAN7RNcQFAS2g5aZjz1S32OQSyTgyf8Co'
YOOKASSA_TEST_PAYMENT_TOKEN = '381764678:TEST:54671'
ADMIN_ID = 405568659

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

accounts = []

PURCHASES_FILENAME = 'purchases.json'

if not os.path.exists(PURCHASES_FILENAME):
    with open(PURCHASES_FILENAME, 'w') as f:
        json.dump([], f)

try:
    with open('accounts.json', 'r') as file:
        accounts = json.load(file)
except FileNotFoundError:
    pass

PRICE = LabeledPrice(label="–ê–∫–∫–∞—É–Ω—Ç", amount=150 * 100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)

@dp.callback_query_handler(lambda c: c.data == "clear_stats")
async def clear_stats(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        return

    with open(PURCHASES_FILENAME, 'w') as f:
        json.dump([], f)

    await bot.answer_callback_query(callback_query.id, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.")
    await bot.send_message(callback_query.from_user.id, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.")




@dp.message_handler(commands=['stats'])
async def show_stats(message: types.Message):
    with open(PURCHASES_FILENAME, 'r') as f:
        purchases = json.load(f)
    total_sales = len(purchases)
    total_revenue = sum(purchase['amount'] for purchase in purchases)

    clear_stats_button = InlineKeyboardMarkup().add(InlineKeyboardButton("–°—Ç–µ—Ä–µ—Ç—å", callback_data="clear_stats"))
    
    await message.reply(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂: {total_sales}\n–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue} —Ä—É–±.",
                        reply_markup=clear_stats_button)



@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply('''–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ AI Avenue Shopü§ñ. 
    
–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /buy_account, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç ChatGPT.''')

@dp.message_handler(commands=['add_account'], commands_prefix='!')
async def cmd_add_account(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    account_info = message.text.split(' ', 1)[1].strip()
    accounts.append(account_info)

    with open('accounts.json', 'w') as file:
        json.dump(accounts, file)

    await message.reply(f"–ê–∫–∫–∞—É–Ω—Ç '{account_info}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")


@dp.message_handler(commands=['buy_account'])
async def buy(message: types.Message):
    if YOOKASSA_TEST_PAYMENT_TOKEN.split(':')[1] == 'TEST':
        await bot.send_message(message.chat.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")

    if not accounts:
        await message.reply('''–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Ä–∞—Å–ø—Ä–æ–¥–∞–Ω—ã.
        
–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã –¥–æ–±–∞–≤–∏–º –¥–ª—è –≤–∞—Å –Ω–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏ –≤—ã —Å–Ω–æ–≤–∞ —Å–º–æ–∂–µ—Ç–µ –∏—Ö –ø—Ä–µ–æ–±—Ä–µ—Å—Ç–∏. –î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy_account —á—É—Ç—å –ø–æ–∑–∂–µ.''')
        return

    await bot.send_invoice(message.chat.id,
                           title="–ê–∫–∫–∞—É–Ω—Ç ChatGPT",
                           description=f'''–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç. 
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –≤–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ.''',
                           provider_token=YOOKASSA_TEST_PAYMENT_TOKEN,
                           currency="rub",
                           photo_url="https://i.postimg.cc/4NWm7HFK/m-JI14-0-DOQ.jpg",
                           photo_width=450,
                           photo_height=450,
                           photo_size=450,
                           is_flexible=False,
                           prices=[PRICE],
                           start_parameter="account_purchase",
                           payload="test-invoice-payload")

@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)
    
@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    global accounts
    account_info = accounts.pop(0)
    
    await bot.send_message(message.chat.id,
                           f"–ü–ª–∞—Ç—ë–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ. \n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:\n{account_info} \n\n–û—Å—Ç–∞–≤—å—Ç–µ —Ö–æ—Ä–æ—à–∏–π –æ—Ç–∑—ã–≤ –∑–¥–µ—Å—å: @aiavenuefaq")

    with open('accounts.json', 'w') as file:
        json.dump(accounts, file)

    if not accounts:
        with open('accounts.json', 'r') as file:
            accounts = json.load(file)
    
    with open(PURCHASES_FILENAME, 'r') as f:
        purchases = json.load(f)

    purchases.append({'amount': message.successful_payment.total_amount // 100})

    with open(PURCHASES_FILENAME, 'w') as f:
        json.dump(purchases, f)



@dp.message_handler()
async def echo(message: types.Message):
    await message.reply("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp)
